name: Send Commit Summary and Release Assets

on:
  push:
    branches:
      - idk  # Change this to your default branch if necessary

jobs:
  sendMessage:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      actions: read
    steps:
      - name: Clone Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Last SHA Artifact
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: dart.yml
          name: last-sha
        continue-on-error: true

      - name: Get Commits Since Last Run
        id: get_commits
        run: |
          # Check if last_sha.txt exists
          if [ -f last_sha.txt ]; then
            LAST_SHA=$(cat last_sha.txt)
            echo "‚úÖ Found last SHA: $LAST_SHA"
          else
            echo "‚ö†Ô∏è No previous SHA found, using first commit."
            LAST_SHA=$(git rev-list --max-parents=0 HEAD)
          fi
          
          echo "Fetching commits since $LAST_SHA..."
          # Fetch new commits
          COMMIT_LOGS=$(git log $LAST_SHA..HEAD --pretty=format:"‚óè %s ~%an [÷ç](https://github.com/${{ github.repository }}/commit/%H)")
          
          # Check if there are new commits
          if [ -z "$COMMIT_LOGS" ]; then
            echo "‚ö†Ô∏è No new commits found."
            exit 0
          fi

          # URL-encode for GitHub Actions
          COMMIT_LOGS="${COMMIT_LOGS//'%'/'%25'}"
          COMMIT_LOGS="${COMMIT_LOGS//$'\n'/'%0A'}"
          COMMIT_LOGS="${COMMIT_LOGS//$'\r'/'%0D'}"
          echo "Commits retrieved: $COMMIT_LOGS"
          
          # Save commit logs to a file
          echo "$COMMIT_LOGS" > commit_log.txt
          
          # Save the latest SHA for future reference
          echo "HEAD" > last_sha.txt

      - name: Categorize Commits
        run: |
          echo "**üöÄ Features**" > TFeatures.txt
          echo "**üêõ Fixes**" > TFixes.txt
          echo "**üîß Refactors**" > TRefactors.txt
          echo "**üíÖ Style**" > TStyle.txt
          echo "**üõ† Chores**" > TChores.txt

          # Read commit logs from the previously saved file and categorize them
          while IFS= read -r line; do
              if [[ $line == feat* ]]; then
                  echo "$line" >> TFeatures.txt
              elif [[ $line =~ ^(fix|bug|improvement|patch) ]]; then
                  echo "$line" >> TFixes.txt
              elif [[ $line == refactor* ]]; then
                  echo "$line" >> TRefactors.txt
              elif [[ $line == style* ]]; then
                  echo "$line" >> TStyle.txt
              elif [[ $line =~ ^(chore|docs|build|ci) ]]; then
                  echo "$line" >> TChores.txt
              fi
          done < commit_log.txt

      - name: Process Commit Sections
        run: |
          # Process each file through the parser
          chmod +x scripts/tel_commit_parser.sed
          
          ./scripts/tel_commit_parser.sed TFeatures.txt > TFeaturesT.txt
          ./scripts/tel_commit_parser.sed TFixes.txt > TFixesT.txt
          ./scripts/tel_commit_parser.sed TRefactors.txt > TRefactorsT.txt
          ./scripts/tel_commit_parser.sed TStyle.txt > TStyleT.txt
          ./scripts/tel_commit_parser.sed TChores.txt > TChoresT.txt

          # Check and remove empty categories
          if [ ! -s TFeaturesT.txt ]; then
              rm -f TFeaturesT.txt
          fi
          if [ ! -s TFixesT.txt ]; then
              rm -f TFixesT.txt
          fi
          if [ ! -s TRefactorsT.txt ]; then
              rm -f TRefactorsT.txt
          fi
          if [ ! -s TStyleT.txt ]; then
              rm -f TStyleT.txt
          fi
          if [ ! -s TChoresT.txt ]; then
              rm -f TChoresT.txt
          fi

          # Combine categories into final output
          {
              echo "Commit Summary"
              echo ""
              [ -f TFeaturesT.txt ] && echo -n "$(cat TFeaturesT.txt) <blockquote>$(cat TFeatures.txt)</blockquote> "
              [ -f TFixesT.txt ] && echo -n "$(cat TFixesT.txt) <blockquote>$(cat TFixes.txt)</blockquote> "
              [ -f TRefactorsT.txt ] && echo -n "$(cat TRefactorsT.txt) <blockquote>$(cat TRefactors.txt)</blockquote> "
              [ -f TStyleT.txt ] && echo -n "$(cat TStyleT.txt) <blockquote>$(cat TStyle.txt)</blockquote> "
              [ -f TChoresT.txt ] && echo -n "$(cat TChoresT.txt) <blockquote>$(cat TChores.txt)</blockquote> "
              echo ""
              echo "‚ùì<a href='https://github.com/${{ github.repository }}/blob/main/INSTALLATION.md'>Don't know which version to download? Click here!</a>"
              echo ""
              echo "üìå <a href='https://github.com/${{github.repository}}/releases/tag/${{ env.LATEST_TAG }}'>Full changelog</a>"
          } > output.txt

          if [ ! -s output.txt ]; then
              echo "No commits found. Skipping Telegram message."
              exit 0
          fi
          markdown_info_tel=$(< output.txt)
          echo "Final Telegram Message:"
          echo "$markdown_info_tel"
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
              -d "chat_id=$TELEGRAM_CHAT_ID" \
              -d "text=$markdown_info_tel" \
              -d "parse_mode=HTML" \
              -d "disable_web_page_preview=true"
