name: Track and Categorize Commits

on:
  push:
    branches:
      - idk

jobs:
  sendMessage:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      actions: read
    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download last SHA artifact
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: dart.yml
          name: last-sha
        continue-on-error: true

      - name: Get Commits Since Last Run
        id: get_commits
        run: |
          if [ -f last_sha.txt ]; then
            LAST_SHA=$(cat last_sha.txt)
            echo "‚úÖ Found last SHA: $LAST_SHA"
          else
            echo "‚ö†Ô∏è No previous SHA found, using first commit."
            LAST_SHA=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "Fetching commits since $LAST_SHA..."
          COMMIT_LOGS=$(git log $LAST_SHA..HEAD --pretty=format:"‚óè %s ~%an [÷ç](https://github.com/${{ github.repository }}/commit/%H)")
          if [ -z "$COMMIT_LOGS" ]; then
            echo "‚ö†Ô∏è No new commits found."
            exit 0
          fi
          # URL-encode for GitHub Actions
          COMMIT_LOGS="${COMMIT_LOGS//'%'/'%25'}"
          COMMIT_LOGS="${COMMIT_LOGS//$'\n'/'%0A'}"
          COMMIT_LOGS="${COMMIT_LOGS//$'\r'/'%0D'}"
          echo "Commits retrieved: $COMMIT_LOGS"
          echo "COMMIT_LOG=$COMMIT_LOGS" >> $GITHUB_ENV
          echo "$COMMIT_LOGS" > commit_log.txt
          
          # Extract branch name
          BRANCH=${{ github.ref }}
          BRANCH=${BRANCH#refs/heads/}
          echo "BRANCH=${BRANCH}" >> $GITHUB_ENV

      - name: Categorize Commits
        id: categorize_commits
        run: |
          declare -A commit_sections
          IFS=$'\n' read -d '' -r -a commits <<< "$COMMIT_LOGS"
          
          for commit in "${commits[@]}"; do
            message=$(echo "$commit" | cut -d' ' -f2-)
            hash=$(echo "$commit" | awk '{print $1}' | cut -d'[' -f2 | cut -d']' -f1)
            link=$(echo "$commit" | grep -oP '\[÷ç\]\(https://github.com/.*?\)' | sed 's/^\[÷ç\](//;s/\)$//')

            if [[ $message == feat* ]]; then
              section="Features"
              heading="üöÄ Features"
              echo "$heading" > TFeatures.txt
              echo "$hash [$link] : $message" >> feat.txt
            elif [[ $message == fix* || $message == bug* || $message == improvement* || $message == patch* ]]; then
              section="Fixes"
              heading="üêõ Fixes"
              echo "$heading" > TFixes.txt
              echo "$hash [$link] : $message" >> fixes.txt
            elif [[ $message == refactor* ]]; then
              section="Refactors"
              heading="üîß Refactors"
              echo "$heading" > TRefactors.txt
              echo "$hash [$link] : $message" >> refactors.txt
            elif [[ $message == style* ]]; then
              section="Style"
              heading="üíÖ Style"
              echo "$heading" > TStyle.txt
              echo "$hash [$link] : $message" >> style.txt
            elif [[ $message == chore* || $message == docs* || $message == build* || $message == ci* ]]; then
              section="Chores"
              heading="üõ† Chores"
              echo "$heading" > TChores.txt
              echo "$hash [$link] : $message" >> chores.txt
            fi
          done

      - name: Process Commit Files
        id: process_commits
        run: |
          # Make the parser executable
          chmod +x scripts/tel_commit_parser.sed
          
          # Process each file through the parser
          ./scripts/tel_commit_parser.sed feat.txt > feat_clean.txt
          ./scripts/tel_commit_parser.sed fixes.txt > fixes_clean.txt
          ./scripts/tel_commit_parser.sed refactors.txt > refactors_clean.txt
          ./scripts/tel_commit_parser.sed style.txt > style_clean.txt
          ./scripts/tel_commit_parser.sed chores.txt > chores_clean.txt

          ./scripts/tel_commit_parser.sed TFeatures.txt > TFeaturesT.txt
          ./scripts/tel_commit_parser.sed TFixes.txt > TFixesT.txt
          ./scripts/tel_commit_parser.sed TRefactors.txt > TRefactorsT.txt
          ./scripts/tel_commit_parser.sed TStyle.txt > TStyleT.txt
          ./scripts/tel_commit_parser.sed TChores.txt > TChoresT.txt

          # Check and remove empty categories
          for category in "feat" "fixes" "refactors" "style" "chores"; do
              if [ ! -s "${category}_clean.txt" ] || [ "$(tr -d '[:space:]' < "${category}_clean.txt")" = "" ]; then
                  rm -f "${category}_clean.txt" "T${category^}sT.txt"
              fi
          done

      - name: Combine Categories into Final Output
        id: combine_output
        run: |
          {
              echo "<your header content here>"
              echo ""
              [ -f TFeaturesT.txt ] && [ -f feat_clean.txt ] && echo -n "$(cat TFeaturesT.txt) <blockquote>$(cat feat_clean.txt)</blockquote> "
              [ -f TFixesT.txt ] && [ -f fixes_clean.txt ] && echo -n "$(cat TFixesT.txt) <blockquote>$(cat fixes_clean.txt)</blockquote> "
              [ -f TRefactorsT.txt ] && [ -f refactors_clean.txt ] && echo -n "$(cat TRefactorsT.txt) <blockquote>$(cat refactors_clean.txt)</blockquote> "
              [ -f TStyleT.txt ] && [ -f style_clean.txt ] && echo -n "$(cat TStyleT.txt) <blockquote>$(cat style_clean.txt)</blockquote> "
              [ -f TChoresT.txt ] && [ -f chores_clean.txt ] && echo -n "$(cat TChoresT.txt) <blockquote>$(cat chores_clean.txt)</blockquote> "
              echo ""
              echo "‚ùì<a href='https://github.com/${{ github.repository }}/blob/main/INSTALLATION.md'>Don't know which version to download? Click here!</a>"
          } > output.txt

          if [ ! -s output.txt ]; then
              echo "No commits found. Skipping Telegram message."
              exit 0
          fi
          markdown_info_tel=$(< output.txt)
          echo "Final Telegram Message:"
          echo "$markdown_info_tel"

      - name: Send to Telegram
        run: |
          TELEGRAM_TOKEN="<YOUR_TELEGRAM_BOT_TOKEN>"
          CHAT_ID="<YOUR_CHAT_ID>"
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
              -d "chat_id=$CHAT_ID" \
              -d "text=$markdown_info_tel" \
              -d "parse_mode=HTML" \
              -d "disable_web_page_preview=true"
