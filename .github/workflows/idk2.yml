name: Track and Categorize Commits

on:
  push:
    branches:
      - idk

jobs:
  sendMessage:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      actions: read
    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download last SHA artifact
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: dart.yml
          name: last-sha
        continue-on-error: true

      - name: Get Commits Since Last Run
        id: get_commits
        run: |
          if [ -f last_sha.txt ]; then
            LAST_SHA=$(cat last_sha.txt)
            echo "✅ Found last SHA: $LAST_SHA"
          else
            echo "⚠️ No previous SHA found, using first commit."
            LAST_SHA=$(git rev-list --max-parents=0 HEAD)
          fi

          echo "Fetching commits since $LAST_SHA..."
          COMMIT_LOGS=$(git log $LAST_SHA..HEAD --pretty=format:"● %s ~%an [֍](https://github.com/${{ github.repository }}/commit/%H)")
          if [ -z "$COMMIT_LOGS" ]; then
            echo "⚠️ No new commits found."
            exit 0
          fi

          # URL-encode for GitHub Actions
          COMMIT_LOGS="${COMMIT_LOGS//'%'/'%25'}"
          COMMIT_LOGS="${COMMIT_LOGS//$'\n'/'%0A'}"
          COMMIT_LOGS="${COMMIT_LOGS//$'\r'/'%0D'}"
          echo "Commits retrieved: $COMMIT_LOGS"
          echo "COMMIT_LOG=$COMMIT_LOGS" >> $GITHUB_ENV
          echo "$COMMIT_LOGS" > commit_log.txt
          
          # Extract branch name
          BRANCH=${{ github.ref }}
          BRANCH=${BRANCH#refs/heads/}
          echo "BRANCH=${BRANCH}" >> $GITHUB_ENV

      - name: Create Commit Sections
        run: |
          echo "**🚀 Features**" > TFeatures.txt
          echo "**🐛 Fixes**" > TFixes.txt
          echo "**🔧 Refactors**" > TRefactors.txt
          echo "**💅 Style**" > TStyle.txt
          echo "**🛠 Chores**" > TChores.txt

          while IFS= read -r line; do
              if [[ $line == feat* ]]; then
                  echo "$line" >> TFeatures.txt
              elif [[ $line =~ ^(fix|bug|improvement|patch) ]]; then
                  echo "$line" >> TFixes.txt
              elif [[ $line == refactor* ]]; then
                  echo "$line" >> TRefactors.txt
              elif [[ $line == style* ]]; then
                  echo "$line" >> TStyle.txt
              elif [[ $line =~ ^(chore|docs|build|ci) ]]; then
                  echo "$line" >> TChores.txt
              fi
          done < commit_log.txt

          # Process each file through the parser
          chmod +x scripts/tel_commit_parser.sed

          for section in TFeatures TFixes TRefactors TStyle TChores; do
              ./scripts/tel_commit_parser.sed "${section}.txt" > "${section}T.txt"
          done

          # Check and remove empty categories
          for section in TFeatures TFixes TRefactors TStyle TChores; do
              if [ ! -s "${section}T.txt" ]; then
                  rm -f "${section}T.txt"
              fi
          done

          # Combine categories into final output
          {
              echo "Commit Summary"
              echo ""
              [ -f TFeaturesT.txt ] && echo -n "$(cat TFeaturesT.txt) "
              [ -f TFixesT.txt ] && echo -n "$(cat TFixesT.txt) "
              [ -f TRefactorsT.txt ] && echo -n "$(cat TRefactorsT.txt) "
              [ -f TStyleT.txt ] && echo -n "$(cat TStyleT.txt) "
              [ -f TChoresT.txt ] && echo -n "$(cat TChoresT.txt) "
              echo ""
          } > output.txt

          if [ ! -s output.txt ]; then
              echo "No commits found. Skipping Telegram message."
              exit 0
          fi

          markdown_info_tel=$(< output.txt)
          echo "Final Telegram Message:"
          echo "$markdown_info_tel"

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
              -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
              -d "text=$markdown_info_tel" \
              -d "parse_mode=HTML" \
              -d "disable_web_page_preview=true"
