name: Track and Categorize Commits

on:
  push:
    branches:
      - idk

jobs:
  track_commits:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Try downloading last seen commit artifact
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: last-seen-commit
          path: .
          merge-multiple: false

      - name: Load last seen commit
        id: load_prev_commit
        run: |
          echo "Checking last seen commit..."
          if [ -f last_seen_commit.txt ]; then
            LAST_SEEN_COMMIT=$(cat last_seen_commit.txt)
            echo "‚úÖ Found last seen commit: $LAST_SEEN_COMMIT"
          else
            echo "‚ùå No last seen commit found, falling back to first commit."
            LAST_SEEN_COMMIT=$(git rev-list --max-parents=0 HEAD)
          fi
          
          echo "prev_commit=$LAST_SEEN_COMMIT" >> $GITHUB_ENV

      - name: Get commit messages since last seen commit
        id: get_commits
        run: |
          echo "Getting commit messages since last seen commit..."
          COMMITS=$(git log ${{ env.prev_commit }}..HEAD --pretty=format:'%h %s' | tr '\n' '|')
          
          if [ -z "$COMMITS" ]; then
            echo "No new commits found."
            exit 0
          fi
          
          echo "Commits retrieved: $COMMITS"
          echo "commits=$COMMITS" >> $GITHUB_ENV

      - name: Categorize commits
        id: categorize
        run: |
          echo "Categorizing commits..."
          FEATURES=""
          BUG_FIXES=""
          REFACTORS=""
          STYLE_CHANGES=""
          PERFORMANCE=""
          CHORES=""
          REPO_URL="https://github.com/${{ github.repository }}"

          IFS='|' read -ra COMMIT_LIST <<< "${{ env.commits }}"
          for LINE in "${COMMIT_LIST[@]}"; do
            HASH=$(echo "$LINE" | awk '{print $1}')
            MESSAGE=$(echo "$LINE" | cut -d' ' -f2-)
            LINK="[$HASH]($REPO_URL/commit/$HASH)"
            FORMATTED_COMMIT="* $LINK: $MESSAGE"

            case "$MESSAGE" in
              feat*) FEATURES+="$FORMATTED_COMMIT\n" ;;
              fix*|bug*|improvement*|patch*) BUG_FIXES+="$FORMATTED_COMMIT\n" ;;
              refactor*) REFACTORS+="$FORMATTED_COMMIT\n" ;;
              style*) STYLE_CHANGES+="$FORMATTED_COMMIT\n" ;;
              perf*) PERFORMANCE+="$FORMATTED_COMMIT\n" ;;
              chore*|docs*|build*|ci*) CHORES+="$FORMATTED_COMMIT\n" ;;
            esac
          done

          # Formatting the final changelog message
          FORMATTED_NOTES=""
          [[ -n "$FEATURES" ]] && FORMATTED_NOTES+="### üéâ Features\n$FEATURES\n"
          [[ -n "$BUG_FIXES" ]] && FORMATTED_NOTES+="### üõ†Ô∏è Fixes\n$BUG_FIXES\n"
          [[ -n "$REFACTORS" ]] && FORMATTED_NOTES+="### üîß Refactors\n$REFACTORS\n"
          [[ -n "$STYLE_CHANGES" ]] && FORMATTED_NOTES+="### üé® Style Changes\n$STYLE_CHANGES\n"
          [[ -n "$PERFORMANCE" ]] && FORMATTED_NOTES+="### üöÄ Performance\n$PERFORMANCE\n"
          [[ -n "$CHORES" ]] && FORMATTED_NOTES+="### üßπ Chores & Docs\n$CHORES\n"

          if [ -z "$FORMATTED_NOTES" ]; then
            echo "No new commits to report."
            exit 0
          fi

          echo "$FORMATTED_NOTES" > changelog.txt
          echo "changelog=$FORMATTED_NOTES" >> $GITHUB_ENV

      - name: Send update to Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_ALPHA }}
        run: |
          discord_data=$(jq -nc \
            --arg desc "$FORMATTED_NOTES\n[üìå Full Changelog](https://github.com/${{github.repository}}/commits/main)" \
            '{
              "content": "<@&1298977336124903457>",
              "embeds": [{
                "title": "üì¢ New Updates",
                "description": $desc,
                "color": 3447003
              }]
            }')

          curl -H "Content-Type: application/json" \
               -X POST \
               -d "$discord_data" \
               "$DISCORD_WEBHOOK_URL"

      - name: Send update to Telegram
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_TOPIC: ${{ secrets.TELEGRAM_THREAD_ID }}
        run: |
          # Start with release header
          echo "<b>üöÄ New Release: beta</b>" > header.txt
          
          # Extract all categories into separate files
          echo "**üöÄ Features**" > TFeatures.txt
          echo "$(echo "$FORMATTED_NOTES" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\sfeat' | sed -E 's/\): [^:]+:/) :/g' | head -n 5)" > feat.txt

          echo "**üêõ Fixes**" > TFixes.txt
          echo "$(echo "$FORMATTED_NOTES" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\s(fix|bug|improvement|patch)' | sed -E 's/\): [^:]+:/) :/g' | head -n 5)" > fixes.txt

          echo "**üîß Refactors**" > TRefactors.txt
          echo "$(echo "$FORMATTED_NOTES" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\srefactor' | sed -E 's/\): [^:]+:/) :/g' | head -n 5)" > refactors.txt

          echo "**üíÖ Style**" > TStyle.txt
          echo "$(echo "$FORMATTED_NOTES" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\sstyle' | sed -E 's/\): [^:]+:/) :/g' | head -n 5)" > style.txt

          echo "**‚ö° Performance**" > TPerformance.txt
          echo "$(echo "$FORMATTED_NOTES" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\sperf' | sed -E 's/\): [^:]+:/) :/g' | head -n 5)" > perf.txt

          echo "**üõ† Chores**" > TChores.txt
          echo "$(echo "$FORMATTED_NOTES" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\s(chore|docs|build|ci)' | sed -E 's/\): [^:]+:/) :/g' | head -n 5)" > chores.txt

          # Process each file through the parser
          chmod +x scripts/tel_commit_parser.sed
          
          ./scripts/tel_commit_parser.sed feat.txt > feat_clean.txt
          ./scripts/tel_commit_parser.sed fixes.txt > fixes_clean.txt
          ./scripts/tel_commit_parser.sed refactors.txt > refactors_clean.txt
          ./scripts/tel_commit_parser.sed style.txt > style_clean.txt
          ./scripts/tel_commit_parser.sed perf.txt > perf_clean.txt
          ./scripts/tel_commit_parser.sed chores.txt > chores_clean.txt
          
          ./scripts/tel_commit_parser.sed TFeatures.txt > TFeaturesT.txt
          ./scripts/tel_commit_parser.sed TFixes.txt > TFixesT.txt
          ./scripts/tel_commit_parser.sed TRefactors.txt > TRefactorsT.txt
          ./scripts/tel_commit_parser.sed TStyle.txt > TStyleT.txt
          ./scripts/tel_commit_parser.sed TPerformance.txt > TPerformanceT.txt
          ./scripts/tel_commit_parser.sed TChores.txt > TChoresT.txt

          # Check and remove empty categories
          if [ ! -s feat_clean.txt ] || [ "$(tr -d '[:space:]' < feat_clean.txt)" = "" ]; then
              rm -f feat_clean.txt TFeaturesT.txt
          fi
          if [ ! -s fixes_clean.txt ] || [ "$(tr -d '[:space:]' < fixes_clean.txt)" = "" ]; then
              rm -f fixes_clean.txt TFixesT.txt
          fi
          if [ ! -s refactors_clean.txt ] || [ "$(tr -d '[:space:]' < refactors_clean.txt)" = "" ]; then
              rm -f refactors_clean.txt TRefactorsT.txt
          fi
          if [ ! -s style_clean.txt ] || [ "$(tr -d '[:space:]' < style_clean.txt)" = "" ]; then
              rm -f style_clean.txt TStyleT.txt
          fi
          if [ ! -s perf_clean.txt ] || [ "$(tr -d '[:space:]' < perf_clean.txt)" = "" ]; then
              rm -f perf_clean.txt TPerformanceT.txt
          fi
          if [ ! -s chores_clean.txt ] || [ "$(tr -d '[:space:]' < chores_clean.txt)" = "" ]; then
              rm -f chores_clean.txt TChoresT.txt
          fi

          # Combine categories into final output
          {
              cat header.txt
              echo ""
              [ -f TFeaturesT.txt ] && [ -f feat_clean.txt ] && echo -n "$(cat TFeaturesT.txt) <blockquote>$(cat feat_clean.txt)</blockquote> "
              [ -f TFixesT.txt ] && [ -f fixes_clean.txt ] && echo -n "$(cat TFixesT.txt) <blockquote>$(cat fixes_clean.txt)</blockquote> "
              [ -f TRefactorsT.txt ] && [ -f refactors_clean.txt ] && echo -n "$(cat TRefactorsT.txt) <blockquote>$(cat refactors_clean.txt)</blockquote> "
              [ -f TStyleT.txt ] && [ -f style_clean.txt ] && echo -n "$(cat TStyleT.txt) <blockquote>$(cat style_clean.txt)</blockquote> "
              [ -f TPerformanceT.txt ] && [ -f perf_clean.txt ] && echo -n "$(cat TPerformanceT.txt) <blockquote>$(cat perf_clean.txt)</blockquote> "
              [ -f TChoresT.txt ] && [ -f chores_clean.txt ] && echo -n "$(cat TChoresT.txt) <blockquote>$(cat chores_clean.txt)</blockquote> "
              echo ""
              echo "‚ùì<a href='https://github.com/${{ github.repository }}/blob/main/INSTALLATION.md'>Don't know which version to download? Click here!</a>"
          } > output.txt

          if [ ! -s output.txt ]; then
              echo "No commits found. Skipping Telegram message."
              exit 0
          fi
          markdown_info_tel=$(< output.txt)
          echo "Final Telegram Message:"
          echo "$markdown_info_tel"
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
              -d "chat_id=$TELEGRAM_CHAT_ID" \
              -d "text=$markdown_info_tel" \
              -d "parse_mode=HTML" \
              -d "disable_web_page_preview=true"

      - name: Save current commit for next run
        id: save_commit
        run: |
          echo "Saving current commit for next run..."
          git rev-parse HEAD > last_seen_commit.txt

      - name: Upload last seen commit (for next run)
        uses: actions/upload-artifact@v4
        with:
          name: last-seen-commit
          path: last_seen_commit.txt
