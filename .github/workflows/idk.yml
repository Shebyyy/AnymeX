name: Build (Beta) idk

on:
  push:
    branches:
      - idk
  workflow_dispatch:

jobs:
  sendMessage:
    runs-on: ubuntu-latest
    #needs: [build-android, build-ios, build-linux, build-windows, build-macos]
    steps:
      - name: Cloning repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download last SHA artifact
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: idk.yml
          name: last-sha
        continue-on-error: true

      - name: Get Commits Since Last Run
        run: |
          # Determine last commit SHA
          if [ -f last_sha.txt ]; then
              LAST_SHA=$(cat last_sha.txt)
          else
              LAST_SHA=$(git rev-list --max-parents=0 HEAD)
          fi
          
          echo "Commits since $LAST_SHA:"
          
          # Store commit logs with short hashes
          COMMIT_LOG=$(git log $LAST_SHA..HEAD --pretty=format:"* [%h](https://github.com/${{ github.repository }}/commit/%H) : %s")
          
          # Save commit logs to a file
          echo "$COMMIT_LOG" > commit_log.txt
          
          cat commit_log.txt
          COMMIT_LOG=$(cat commit_log.txt) 
          echo "COMMIT_LOG<<EOF" >> $GITHUB_ENV
          echo "$COMMIT_LOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # Extract branch name from github.ref
          BRANCH=${{ github.ref }}
          BRANCH=${BRANCH#refs/heads/}
          echo "BRANCH=${BRANCH}" >> $GITHUB_ENV
        shell: /usr/bin/bash -e {0}
        env:
          CI: true
        continue-on-error: true

      - name: Save Current SHA for Next Run
        run: echo ${{ github.sha }} > last_sha.txt

      - name: Categorize Commits (Limit to 5 Each)
        run: |
          # Read commit log
          COMMIT_LOG=$(cat commit_log.txt)

          # Function to get up to 5 commits per category
          get_limited_commits() {
            echo "$1" | grep -E "$2" | head -n 5 || true
          }

          # Categorize commits (limit to 5 per category)
          FEATURES=$(get_limited_commits "$COMMIT_LOG" "feat")
          FIXES=$(get_limited_commits "$COMMIT_LOG" "(fix|bug|improvement|patch)")
          REFACTORS=$(get_limited_commits "$COMMIT_LOG" "refactor")
          STYLE=$(get_limited_commits "$COMMIT_LOG" "style")
          PERFORMANCE=$(get_limited_commits "$COMMIT_LOG" "perf")
          CHORES=$(get_limited_commits "$COMMIT_LOG" "(chore|docs|build|ci)")

          # Prepare commit message
          MESSAGE="### üìù Commit Summary"

          if [ -n "$FEATURES" ]; then
            MESSAGE+="üöÄ **Features:**$FEATURES"
          fi
          if [ -n "$FIXES" ]; then
            MESSAGE+="üêõ **Fixes:**$FIXES"
          fi
          if [ -n "$REFACTORS" ]; then
            MESSAGE+="üîß **Refactors:**$REFACTORS"
          fi
          if [ -n "$STYLE" ]; then
            MESSAGE+="üíÖ **Style:**$STYLE"
          fi
          if [ -n "$PERFORMANCE" ]; then
            MESSAGE+="‚ö° **Performance:**$PERFORMANCE"
          fi
          if [ -n "$CHORES" ]; then
            MESSAGE+="üõ† **Chores:**$CHORES"
          fi

          # Save to environment variable
          {
            echo "COMMIT_MESSAGE<<EOF"
            echo "$MESSAGE"
            echo "EOF"
          } >> $GITHUB_ENV
        shell: /usr/bin/bash -e {0}

      - name: Display Commit Message
        run: |
          echo "$COMMIT_MESSAGE"
        shell: /usr/bin/bash -e {0}

      - name: Format Commit Message
        run: |
          # Remove unnecessary colons in commit messages
          FORMATTED_NOTES=$(echo "$COMMIT_MESSAGE" | sed -E 's/\): [^:]+:/) :/g')
          {
            echo "FORMATTED_NOTES<<EOF"
            echo "$FORMATTED_NOTES"
            echo "EOF"
          } >> $GITHUB_ENV
          
        shell: /usr/bin/bash -e {0}

      - name: Send message to Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_ALPHA }}
        run: |         

          FORMATTED_NOTES=$(echo "$FORMATTED_NOTES" | sed -E 's/\): [^:]+:/) :/g')
          default_color="#1ac4c5"
          hex_to_decimal() { printf '%d' "0x${1#"#"}"; }
          embed_color=$(hex_to_decimal "$default_color")

          # Ensure VERSION is not empty
          VERSION=${VERSION:-"${{env.LATEST_TAG}}"}
          # Construct Discord payload
          discord_data=$(jq -nc \
                              --arg field_value "$FORMATTED_NOTES" \
                              --arg footer_text "Version beta" \
                              --arg timestamp "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)" \
                              --arg embed_color "$embed_color" \
                              '{
                                "content": "<@&1313089691523878942>",
                                "embeds": [
                                  {
                                    "title": "üöÄ New Beta Release",
                                    "color": ($embed_color | tonumber),
                                    "fields": [
                                      {
                                        "name": "Commits:",
                                        "value": $field_value,
                                        "inline": false
                                      }
                                    ],
                                    "footer": {
                                      "text": $footer_text
                                    },
                                    "timestamp": $timestamp
                                  }
                                ]
                              }')
          
          # Debugging: Print the payload
          echo "Debug: Discord Payload -> $discord_data"
          
          # Send the message to Discord
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "$discord_data" \
               "$DISCORD_WEBHOOK_URL"
               
      - name: Send message to Telegram
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_TOPIC: ${{ secrets.TELEGRAM_THREAD_ID }}
        run: |
          # Define release type (Beta or Stable)
          RELEASE_TYPE="Beta"  # Change this dynamically if needed
          
          # Start with release header
          echo "<b>üöÄ New Release: $RELEASE_TYPE</b>" > header.txt
          
          # Extract all categories into separate files
          declare -A categories=(
              ["feat"]="üöÄ Features"
              ["fix|bug|improvement|patch"]="üêõ Fixes"
              ["refactor"]="üîß Refactors"
              ["style"]="üíÖ Style"
              ["perf"]="‚ö° Performance"
              ["chore|docs|build|ci"]="üõ† Chores"
          )
          
          for key in "${!categories[@]}"; do
              title="${categories[$key]}"
              file_key=$(echo "$title" | tr '[:upper:] ' '[:lower:]_' | tr -d 'üõ†‚ö°üíÖüîßüêõüöÄ')
              
              echo "**$title**" > "T${file_key}.txt"
              echo "$(echo "$FORMATTED_NOTES" | grep -iE "^\*\s\[[a-f0-9]+\]\(.*\):\s($key)" | sed -E 's/\): [^:]+:/) :/g' | head -n 5)" > "${file_key}.txt"
          done
          
          # Process each file through the parser
          chmod +x scripts/tel_commit_parser.sed
          
          for key in "${!categories[@]}"; do
              file_key=$(echo "${categories[$key]}" | tr '[:upper:] ' '[:lower:]_' | tr -d 'üõ†‚ö°üíÖüîßüêõüöÄ')
              ./scripts/tel_commit_parser.sed "${file_key}.txt" > "${file_key}_clean.txt"
              ./scripts/tel_commit_parser.sed "T${file_key}.txt" > "T${file_key}T.txt"
          done
          
          # Check and remove empty categories
          for key in "${!categories[@]}"; do
              file_key=$(echo "${categories[$key]}" | tr '[:upper:] ' '[:lower:]_' | tr -d 'üõ†‚ö°üíÖüîßüêõüöÄ')
              if [ ! -s "${file_key}_clean.txt" ] || [ "$(tr -d '[:space:]' < "${file_key}_clean.txt")" = "" ]; then
                  rm -f "${file_key}_clean.txt" "T${file_key}T.txt"
              fi
          done
          
          # Combine categories into final output
          {
              cat header.txt
              echo ""
              for key in "${!categories[@]}"; do
                  file_key=$(echo "${categories[$key]}" | tr '[:upper:] ' '[:lower:]_' | tr -d 'üõ†‚ö°üíÖüîßüêõüöÄ')
                  [ -f "T${file_key}T.txt" ] && [ -f "${file_key}_clean.txt" ] && echo -n "$(cat T${file_key}T.txt) <blockquote>$(cat ${file_key}_clean.txt)</blockquote> "
              done
              echo ""
              echo "‚ùì<a href='https://github.com/${{ github.repository }}/blob/main/INSTALLATION.md'>Don't know which version to download? Click here!</a>"
          } > output.txt
          
          # Send message to Telegram if commits exist
          if [ ! -s output.txt ]; then
              echo "No commits found. Skipping Telegram message."
              exit 0
          fi
          
          markdown_info_tel=$(< output.txt)
          echo "Final Telegram Message:"
          echo "$markdown_info_tel"
          
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
              -d "chat_id=$TELEGRAM_CHAT_ID" \
              -d "text=$markdown_info_tel" \
              -d "parse_mode=HTML" \
              -d "disable_web_page_preview=true"
          
          Commits:
          ${telegram_commit_messages}
          Version: $VERSION


              
      - name: Upload Current SHA as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: last-sha
          path: last_sha.txt

      - name: Send Discord Notification with Download Links
        env:
          ANDROID_ARM64_LINK: ${{ needs.build-android.outputs.arm64_link }}
          ANDROID_ARMEABI_LINK: ${{ needs.build-android.outputs.armeabi_link }}
          ANDROID_X86_LINK: ${{ needs.build-android.outputs.x86_link }}
          ANDROID_UNIVERSAL_LINK: ${{ needs.build-android.outputs.universal_link }}
          IOS_LINK: ${{ needs.build-ios.outputs.ios_link }}
          LINUX_ZIP_LINK: ${{ needs.build-linux.outputs.linux_zip_link }}
          LINUX_APPIMAGE_LINK: ${{ needs.build-linux.outputs.linux_appimage_link }}
          LINUX_RPM_LINK: ${{ needs.build-linux.outputs.linux_rpm_link }}
          WINDOWS_ZIP_LINK: ${{ needs.build-windows.outputs.windows_zip_link }}
          WINDOWS_EXE_LINK: ${{ needs.build-windows.outputs.windows_exe_link }}
          MACOS_LINK: ${{ needs.build-macos.outputs.macos_link }}
        run: |
          MESSAGE="Beta Released
      
          üîπ [Download]($ANDROID_ARM64_LINK) | **Android (arm64)**
          üîπ [Download]($ANDROID_ARMEABI_LINK) | **Android (armeabi-v7a)**
          üîπ [Download]($ANDROID_UNIVERSAL_LINK) | **Android (universal)**
          üîπ [Download]($ANDROID_X86_LINK) | **Android (x86 & x64)**
          üîπ [Download]($WINDOWS_ZIP_LINK) | **Windows ZIP**
          üîπ [Download]($WINDOWS_EXE_LINK) | **Windows EXE**
          üîπ [Download]($LINUX_ZIP_LINK) | **Linux ZIP**
          üîπ [Download]($LINUX_APPIMAGE_LINK) | **Linux AppImage**
          üîπ [Download]($LINUX_RPM_LINK) | **Linux RPM**
          üîπ [Download]($IOS_LINK) | **iOS**
          üîπ [Download]($MACOS_LINK) | **macOS**"

          # Send to Discord if the message is not empty
          if [[ -n "$MESSAGE" ]]; then
            curl -H "Content-Type: application/json" \
                 -d "{\"content\": \"$MESSAGE\"}" \
                 "${{ secrets.DISCORD_WEBHOOK_ALPHA }}"
          fi

      - name: Send Telegram Notification
        env:
          ANDROID_ARM64_LINK: ${{ needs.build-android.outputs.arm64_link }}
          ANDROID_ARMEABI_LINK: ${{ needs.build-android.outputs.armeabi_link }}
          ANDROID_X86_LINK: ${{ needs.build-android.outputs.x86_link }}
          ANDROID_UNIVERSAL_LINK: ${{ needs.build-android.outputs.universal_link }}
          IOS_LINK: ${{ needs.build-ios.outputs.ios_link }}
          LINUX_ZIP_LINK: ${{ needs.build-linux.outputs.linux_zip_link }}
          LINUX_APPIMAGE_LINK: ${{ needs.build-linux.outputs.linux_appimage_link }}
          LINUX_RPM_LINK: ${{ needs.build-linux.outputs.linux_rpm_link }}
          WINDOWS_ZIP_LINK: ${{ needs.build-windows.outputs.windows_zip_link }}
          WINDOWS_EXE_LINK: ${{ needs.build-windows.outputs.windows_exe_link }}
          MACOS_LINK: ${{ needs.build-macos.outputs.macos_link }}
        run: |
          TELEGRAM_MESSAGE="üéâ *Beta Released* üéâ
      
          üîπ [Download]($ANDROID_ARM64_LINK) | **Android (arm64)**
          üîπ [Download]($ANDROID_ARMEABI_LINK) | **Android (armeabi-v7a)**
          üîπ [Download]($ANDROID_UNIVERSAL_LINK) | **Android (universal)**
          üîπ [Download]($ANDROID_X86_LINK) | **Android (x86 & x64)**
          üîπ [Download]($WINDOWS_ZIP_LINK) | **Windows ZIP**
          üîπ [Download]($WINDOWS_EXE_LINK) | **Windows EXE**
          üîπ [Download]($LINUX_ZIP_LINK) | **Linux ZIP**
          üîπ [Download]($LINUX_APPIMAGE_LINK) | **Linux AppImage**
          üîπ [Download]($LINUX_RPM_LINK) | **Linux RPM**
          üîπ [Download]($IOS_LINK) | **iOS**
          üîπ [Download]($MACOS_LINK) | **macOS**"

          curl -sS -f -X POST \
              "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
              -F "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
              -F "message_thread_id=${{ secrets.TELEGRAM_THREAD_ID }}" \
              -F parse_mode="Markdown" \
              -F disable_notification=true \
              -F "text=$TELEGRAM_MESSAGE"
              
